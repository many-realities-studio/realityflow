%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f8f40005f71da0842b543834cc80d108, type: 3}
  m_Name: ChatGPTQuestion_3
  m_EditorClassIdentifier: 
  scenarioTitle: 
  promptPrefixConstant: A unity c# class script that
  prompt: 
  replacements: []
  reminders:
  - 'Only use the RealityFlow API which an example of which is referenced here: 
    # RealityFlowAPI Reference Sheet  ## Overview  The `RealityFlowAPI` class provides
    a set of functions to manage and interact with objects and graphs in a networked
    Unity environment. This reference sheet details each function and provides short
    examples of how to use them.  ## API Functions  ### 1. `AssignGraph(Graph newGraph,
    GameObject obj)`  **Description**: Assigns a graph ID to the specified object. 
    **Example**:  ```csharp Graph newGraph = CreateNodeGraphAsync(); GameObject obj
    = FindSpawnedObject("exampleObjectId"); RealityFlowAPI.Instance.AssignGraph(newGraph,
    obj); ```  ### 2. `CreateNodeGraphAsync()`  **Description**: Creates a new node
    graph asynchronously.  **Example**:  ```csharp Graph newGraph = RealityFlowAPI.Instance.CreateNodeGraphAsync();
    ```  ### 3. `SaveGraphAsync(Graph toSave)`  **Description**: Saves the specified
    graph to the database.  **Example**:  ```csharp RealityFlowAPI.Instance.SaveGraphAsync(newGraph);
    ```  ### 4. `SendGraphUpdateToDatabase(string graphJson, string graphId)`  **Description**:
    Sends the updated graph data to the database.  **Example**:  ```csharp string
    updatedGraphJson = JsonUtility.ToJson(newGraph); RealityFlowAPI.Instance.SendGraphUpdateToDatabase(updatedGraphJson,
    newGraph.Id); ```  ### 5. `AddNodeToGraph(Graph graph, NodeDefinition def)` 
    **Description**: Adds a node to the specified graph.  **Example**:  ```csharp
    NodeDefinition nodeDef = // Get node definition NodeIndex index = RealityFlowAPI.Instance.AddNodeToGraph(graph,
    nodeDef); ```  ### 6. `RemoveNodeFromGraph(Graph graph, NodeIndex node)`  **Description**:
    Removes a node from the specified graph.  **Example**:  ```csharp RealityFlowAPI.Instance.RemoveNodeFromGraph(graph,
    nodeIndex); ```  ### 7. `AddDataEdgeToGraph(Graph graph, PortIndex from, PortIndex
    to)`  **Description**: Adds a data edge between two nodes in the graph.  **Example**: 
    ```csharp RealityFlowAPI.Instance.AddDataEdgeToGraph(graph, fromPortIndex, toPortIndex);
    ```  ### 8. `RemoveDataEdgeFromGraph(Graph graph, PortIndex from, PortIndex to)` 
    **Description**: Removes a data edge between two nodes in the graph.  **Example**: 
    ```csharp RealityFlowAPI.Instance.RemoveDataEdgeFromGraph(graph, fromPortIndex,
    toPortIndex); ```  ### 9. `AddExecEdgeToGraph(Graph graph, PortIndex from, NodeIndex
    to)`  **Description**: Adds an execution edge between two nodes in the graph. 
    **Example**:  ```csharp RealityFlowAPI.Instance.AddExecEdgeToGraph(graph, fromPortIndex,
    toNodeIndex); ```  ### 10. `RemoveExecEdgeFromGraph(Graph graph, PortIndex from,
    NodeIndex to)`  **Description**: Removes an execution edge between two nodes
    in the graph.  **Example**:  ```csharp RealityFlowAPI.Instance.RemoveExecEdgeFromGraph(graph,
    fromPortIndex, toNodeIndex); ```  ### 11. `SetNodePosition(Graph graph, NodeIndex
    node, Vector2 position)`  **Description**: Sets the position of a node in the
    graph.  **Example**:  ```csharp RealityFlowAPI.Instance.SetNodePosition(graph,
    nodeIndex, newPosition); ```  ### 12. `SetNodeFieldValue(Graph graph, NodeIndex
    node, int field, NodeValue value)`  **Description**: Sets the value of a node
    field in the graph.  **Example**:  ```csharp RealityFlowAPI.Instance.SetNodeFieldValue(graph,
    nodeIndex, fieldIndex, newValue); ```  ### 13. `SetNodeInputConstantValue(Graph
    graph, NodeIndex node, int port, NodeValue value)`  **Description**: Sets a constant
    value for a node input port in the graph.  **Example**:  ```csharp RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    nodeIndex, portIndex, newValue); ```  ### 14. `AddVariableToGraph(Graph graph,
    string name, NodeValueType type)`  **Description**: Adds a variable to the graph. 
    **Example**:  ```csharp RealityFlowAPI.Instance.AddVariableToGraph(graph, variableName,
    variableType); ```  ### 15. `RemoveVariableFromGraph(Graph graph, string name)` 
    **Description**: Removes a variable from the graph.  **Example**:  ```csharp
    RealityFlowAPI.Instance.RemoveVariableFromGraph(graph, variableName); ```  ###
    16. `SpawnObject(string prefabName, Vector3 spawnPosition, Vector3 scale = default,
    Quaternion spawnRotation = default, SpawnScope scope = SpawnScope.Room)`  **Description**:
    Spawns an object from the specified prefab at the given position, scale, and
    rotation.  **Example**:  ```csharp RealityFlowAPI.Instance.SpawnObject(objectPrefab.name,
    Vector3.zero, objectPrefab.transform.localScale, Quaternion.identity, RealityFlowAPI.SpawnScope.Room);
    GameObject spawnedObject = RealityFlowAPI.Instance.SpawnObject("PrefabName",
    spawnPosition, spawnScale, spawnRotation); ```  ### 17. `DespawnObject(GameObject
    objectToDespawn)`  **Description**: Despawns the specified object.  **Example**: 
    ```csharp RealityFlowAPI.Instance.DespawnObject(objectToDespawn); ```  ### 18.
    `FindSpawnedObject(string id)`  **Description**: Finds a spawned object by its
    ID.  **Example**:  ```csharp GameObject foundObject = RealityFlowAPI.Instance.FindSpawnedObject("objectId");
    ```  ### 19. `SelectAndOutlineObject(string id)`  **Description**: Selects and
    applies an outline effect to the object with the specified ID.  **Example**: 
    ```csharp RealityFlowAPI.Instance.SelectAndOutlineObject("objectId"); ```  ###
    20. `UpdateObjectTransform(string objectName, Vector3 position, Quaternion rotation,
    Vector3 scale)`  **Description**: Updates the transform of the specified object. 
    **Example**:  ```csharp RealityFlowAPI.Instance.UpdateObjectTransform("objectName",
    newPosition, newRotation, newScale); ```  ### 21. `UndoLastAction()`  **Description**:
    Undoes the last logged action.  **Example**:  ```csharp RealityFlowAPI.Instance.UndoLastAction();
    ```  ### 22. `StartCompoundAction()`  **Description**: Starts a compound action
    for batching multiple actions together.  **Example**:  ```csharp RealityFlowAPI.Instance.StartCompoundAction();
    ```  ### 23. `EndCompoundAction()`  **Description**: Ends a compound action. 
    **Example**:  ```csharp RealityFlowAPI.Instance.EndCompoundAction(); ```  ##
    Support Functions  ### `ExportSpawnedObjectsData()`  **Description**: Exports
    data for all spawned objects in the room.  **Example**:  ```csharp string data
    = RealityFlowAPI.Instance.ExportSpawnedObjectsData(); Debug.Log(data); ```  ###
    `GetPrefabByName(string name)`  **Description**: Retrieves a prefab by its name
    from the catalogue.  **Example**:  ```csharp GameObject prefab = RealityFlowAPI.Instance.GetPrefabByName("PrefabName");
    ```  ### `FetchAndPopulateObjects()`  **Description**: Fetches objects from the
    database and populates the room with them.  **Example**:  ```csharp RealityFlowAPI.Instance.FetchAndPopulateObjects();
    ```  ### `FindSpawnedObjectByName(string objectName)`  **Description**: Finds
    a spawned object by its name.  **Example**:  ```csharp GameObject foundObject
    = RealityFlowAPI.Instance.FindSpawnedObjectByName("ObjectName"); ```  ### `UpdatePeerObjectTransform(GameObject
    obj, Vector3 position, Quaternion rotation, Vector3 scale)`  **Description**:
    Updates the transform of a peer object and sends the update to the network. 
    **Example**:  ```csharp RealityFlowAPI.Instance.UpdatePeerObjectTransform(peerObject,
    newPosition, newRotation, newScale); ```  ### `ProcessPeerTransformUpdate(string
    propertyKey, string jsonMessage)`  **Description**: Processes a transform update
    received from a peer.  **Example**:  ```csharp RealityFlowAPI.Instance.ProcessPeerTransformUpdate("propertyKey",
    jsonMessage); ``` '
  - do not include any explanations
  - aways include code with markdown
  - do not require any prefabs
  - do not require any references
  - all references should not be null
  - 'Use the namespaces using UnityEngine; using System.Collections; using Graph
    = RealityFlow.NodeGraph.Graph;  using RealityFlow.NodeGraph; '
  - ONLY GENERATE CODE THAT MATCHES WHAT THE USER IS REQUESTING NOTHING ELSE
  - DO NOT USE COROUTINES
  - All code should be in a static Execute method
  - Do not use any methods that you yourseld do not create or know you have specific
    access to such as Invoke()
  - 'Remember that the Execute method is static and instance methods of MonoBehaviour
    cannot be called from a static method. If you want to use one do it like this
    example: using UnityEngine; using System.Collections; using StarterAssets;  public
    class SpawnRectangle : MonoBehaviour {     public static void Execute()     {        
    string message = "This is what we heard you say, is this correct: \"Spawn a Rectangle\"?";        
    Debug.Log(message);          // Create a new GameObject and add this script to
    it         GameObject go = new GameObject("SpawnRectangleObject");         SpawnRectangle
    script = go.AddComponent<SpawnRectangle>();          // Start the coroutine to
    delay sending the confirmation message         script.StartCoroutine(script.DelayedMessage(1.0f));    
    }      private IEnumerator DelayedMessage(float delay)     {         yield return
    new WaitForSeconds(delay);          Debug.Log("Message will be sent in 1 seconds
    unless canceled or re-recorded.");          // Spawn a Rectangle object after
    the delay         RealityFlowAPI.Instance.SpawnObject("Rectangle (Horizontal)",
    new Vector3(0, 0, 0), Vector3.one, Quaternion.identity, RealityFlowAPI.SpawnScope.Peer);         
    // Optionally, destroy the GameObject after spawning to clean up         Destroy(gameObject);    
    } } '
  - DO NOT USE MONOBEHAVIOURS
  - If you spawn an object make it have the tag 'Spawned' and let it keep its natural
    scale which you can get with .transform.localScale
  - 'IF YOU MAKE A NODE GRAPH OR VISUAL SCRIPT YOU MUST DO IT EXACTLY THIS WAY USING
    THE FUNCTIONS YOU SEE HERE. DO NOT DO IT ANY OTHER WAY:  private void CreateComprehensiveGraphProcedure(string
    objId, float spacing)     {         // Find the object         GameObject obj
    = GameObject.Find(objId);          if (obj == null)         {             Debug.LogError($"Object
    with ID {objId} not found.");             return;         }          // Ensure
    the object has a VisualScript component         var visualScript = obj.GetComponent<VisualScript>();        
    if (visualScript == null)         {             Debug.LogError("VisualScript
    component not found on the object.");             return;         }         
    // Get the current graph         Graph graph = visualScript.graph;         if
    (graph == null)         {             Debug.LogError("Graph not found on the
    VisualScript component.");             return;         }          // Create new
    node definitions         NodeDefinition floatAddDef = RealityFlowAPI.Instance.NodeDefinitionDict["FloatAdd"];        
    NodeDefinition floatMultiplyDef = RealityFlowAPI.Instance.NodeDefinitionDict["FloatMultiply"];        
    NodeDefinition intGreaterOrEqualDef = RealityFlowAPI.Instance.NodeDefinitionDict["IntGreaterOrEqual"];        
    NodeDefinition setPositionDef = RealityFlowAPI.Instance.NodeDefinitionDict["SetPosition"];        
    NodeDefinition thisObjectDef = RealityFlowAPI.Instance.NodeDefinitionDict["ThisObject"];        
    NodeDefinition vector3Def = RealityFlowAPI.Instance.NodeDefinitionDict["Vector3
    Right"];         NodeDefinition intAddDef = RealityFlowAPI.Instance.NodeDefinitionDict["IntAdd"];         
    // Define spacing         spacing = 100.0f;          // Position offset for spacing
    out the nodes in a rectangular grid pattern         Vector2[] positions = new
    Vector2[]         {         new Vector2(0, 0),         new Vector2(spacing, 0),        
    new Vector2(-spacing, 0),         new Vector2(0, spacing),         new Vector2(0,
    -spacing),         new Vector2(spacing, spacing),         new Vector2(-spacing,
    -spacing)         };          // Add new nodes to the graph and set their positions        
    NodeIndex floatAddNode = RealityFlowAPI.Instance.AddNodeToGraph(graph, floatAddDef);        
    RealityFlowAPI.Instance.SetNodePosition(graph, floatAddNode, positions[0]);         
    NodeIndex floatMultiplyNode = RealityFlowAPI.Instance.AddNodeToGraph(graph, floatMultiplyDef);        
    RealityFlowAPI.Instance.SetNodePosition(graph, floatMultiplyNode, positions[1]);         
    NodeIndex greaterOrEqualNode = RealityFlowAPI.Instance.AddNodeToGraph(graph,
    intGreaterOrEqualDef);         RealityFlowAPI.Instance.SetNodePosition(graph,
    greaterOrEqualNode, positions[2]);          NodeIndex setPositionNode = RealityFlowAPI.Instance.AddNodeToGraph(graph,
    setPositionDef);         RealityFlowAPI.Instance.SetNodePosition(graph, setPositionNode,
    positions[3]);          NodeIndex thisObjectNode = RealityFlowAPI.Instance.AddNodeToGraph(graph,
    thisObjectDef);         RealityFlowAPI.Instance.SetNodePosition(graph, thisObjectNode,
    positions[4]);          NodeIndex vector3Node = RealityFlowAPI.Instance.AddNodeToGraph(graph,
    vector3Def);         RealityFlowAPI.Instance.SetNodePosition(graph, vector3Node,
    positions[5]);          NodeIndex intAddNode = RealityFlowAPI.Instance.AddNodeToGraph(graph,
    intAddDef);         RealityFlowAPI.Instance.SetNodePosition(graph, intAddNode,
    positions[6]);          // Set the input constant values for the new nodes        
    RealityFlowAPI.Instance.SetNodeInputConstantValue(graph, floatAddNode, 0, new
    FloatValue(2.0f));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    floatAddNode, 1, new FloatValue(3.0f));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    floatMultiplyNode, 1, new FloatValue(4.0f));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    greaterOrEqualNode, 0, new IntValue(5));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    greaterOrEqualNode, 1, new IntValue(10));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    intAddNode, 0, new IntValue(0));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    intAddNode, 1, new IntValue(1));          // Create connections (edges) between
    the nodes         // Logical connections         PortIndex addOutputPort = new
    PortIndex(floatAddNode, 0); // Output of FloatAdd node         PortIndex multiplyInputPort
    = new PortIndex(floatMultiplyNode, 0); // First input of FloatMultiply node        
    RealityFlowAPI.Instance.AddDataEdgeToGraph(graph, addOutputPort, multiplyInputPort);         
    // Conditional connections         PortIndex thisObjectOutput = new PortIndex(thisObjectNode,
    0);         PortIndex vector3Output = new PortIndex(vector3Node, 0);        
    PortIndex conditionOutput = new PortIndex(greaterOrEqualNode, 0);         PortIndex
    setPositionTarget = new PortIndex(setPositionNode, 0);         PortIndex setPositionValue
    = new PortIndex(setPositionNode, 1);         PortIndex conditionInput = new PortIndex(setPositionNode,
    2); // Assuming the condition input is on index 2         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    thisObjectOutput, setPositionTarget);         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    vector3Output, setPositionValue);         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    conditionOutput, conditionInput);          // Looping connections         PortIndex
    intAddOutput = new PortIndex(intAddNode, 0);         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    thisObjectOutput, setPositionTarget);         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    vector3Output, setPositionValue);         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    intAddOutput, setPositionValue);          Debug.Log($"Added and linked nodes
    for comprehensive procedure in the graph.");     }'
  - Use the provided object id which is the Object's name and the graph information
    to do graph manipulations
  - Do not send the updated graph to the database
  - 'Only define Node definitions like this:  NodeDefinition floatAddDef = RealityFlowAPI.Instance.NodeDefinitionDict["FloatAdd"];        
    NodeDefinition floatMultiplyDef = RealityFlowAPI.Instance.NodeDefinitionDict["FloatMultiply"];        
    NodeDefinition intGreaterOrEqualDef = RealityFlowAPI.Instance.NodeDefinitionDict["IntGreaterOrEqual"];        
    NodeDefinition setPositionDef = RealityFlowAPI.Instance.NodeDefinitionDict["SetPosition"];        
    NodeDefinition thisObjectDef = RealityFlowAPI.Instance.NodeDefinitionDict["ThisObject"];        
    NodeDefinition vector3Def = RealityFlowAPI.Instance.NodeDefinitionDict["Vector3
    Right"];         NodeDefinition intAddDef = RealityFlowAPI.Instance.NodeDefinitionDict["IntAdd"];'
  - 'Set values like this only:  RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    floatAddNode, 0, new FloatValue(2.0f));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    floatAddNode, 1, new FloatValue(3.0f));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    floatMultiplyNode, 1, new FloatValue(4.0f));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    greaterOrEqualNode, 0, new IntValue(5));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    greaterOrEqualNode, 1, new IntValue(10));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    intAddNode, 0, new IntValue(0));         RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    intAddNode, 1, new IntValue(1));'
  - Do not make nodes or graphs any other way than the ways that I showed you above
  - Space the nodes out when spawned use 100.0 spacing
  - 'Do what the user prompt says don''t do any node or graph things unless specified
    in the prompt. For example: "Spawn a cube" does not require any node graph code'
