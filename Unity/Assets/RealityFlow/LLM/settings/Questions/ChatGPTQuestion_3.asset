%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f8f40005f71da0842b543834cc80d108, type: 3}
  m_Name: ChatGPTQuestion_3
  m_EditorClassIdentifier: 
  scenarioTitle: 
  promptPrefixConstant: A unity c# class script that
  prompt: 
  replacements: []
  reminders:
  - 'Only use the RealityFlow API which an example of which is referenced here: 
    # RealityFlowAPI Reference Sheet  ## Overview  The `RealityFlowAPI` class provides
    a set of functions to manage and interact with objects and graphs in a networked
    Unity environment. This reference sheet details each function and provides short
    examples of how to use them.  ## API Functions  ### 1. `AssignGraph(Graph newGraph,
    GameObject obj)`  **Description**: Assigns a graph ID to the specified object. 
    **Example**:  ```csharp Graph newGraph = CreateNodeGraphAsync(); GameObject obj
    = FindSpawnedObject("exampleObjectId"); RealityFlowAPI.Instance.AssignGraph(newGraph,
    obj); ```  ### 2. `CreateNodeGraphAsync()`  **Description**: Creates a new node
    graph asynchronously.  **Example**:  ```csharp Graph newGraph = RealityFlowAPI.Instance.CreateNodeGraphAsync();
    ```  ### 3. `SaveGraphAsync(Graph toSave)`  **Description**: Saves the specified
    graph to the database.  **Example**:  ```csharp RealityFlowAPI.Instance.SaveGraphAsync(newGraph);
    ```  ### 4. `SendGraphUpdateToDatabase(string graphJson, string graphId)`  **Description**:
    Sends the updated graph data to the database.  **Example**:  ```csharp string
    updatedGraphJson = JsonUtility.ToJson(newGraph); RealityFlowAPI.Instance.SendGraphUpdateToDatabase(updatedGraphJson,
    newGraph.Id); ```  ### 5. `AddNodeToGraph(Graph graph, NodeDefinition def)` 
    **Description**: Adds a node to the specified graph.  **Example**:  ```csharp
    NodeDefinition nodeDef = // Get node definition NodeIndex index = RealityFlowAPI.Instance.AddNodeToGraph(graph,
    nodeDef); ```  ### 6. `RemoveNodeFromGraph(Graph graph, NodeIndex node)`  **Description**:
    Removes a node from the specified graph.  **Example**:  ```csharp RealityFlowAPI.Instance.RemoveNodeFromGraph(graph,
    nodeIndex); ```  ### 7. `AddDataEdgeToGraph(Graph graph, PortIndex from, PortIndex
    to)`  **Description**: Adds a data edge between two nodes in the graph.  **Example**: 
    ```csharp RealityFlowAPI.Instance.AddDataEdgeToGraph(graph, fromPortIndex, toPortIndex);
    ```  ### 8. `RemoveDataEdgeFromGraph(Graph graph, PortIndex from, PortIndex to)` 
    **Description**: Removes a data edge between two nodes in the graph.  **Example**: 
    ```csharp RealityFlowAPI.Instance.RemoveDataEdgeFromGraph(graph, fromPortIndex,
    toPortIndex); ```  ### 9. `AddExecEdgeToGraph(Graph graph, PortIndex from, NodeIndex
    to)`  **Description**: Adds an execution edge between two nodes in the graph. 
    **Example**:  ```csharp RealityFlowAPI.Instance.AddExecEdgeToGraph(graph, fromPortIndex,
    toNodeIndex); ```  ### 10. `RemoveExecEdgeFromGraph(Graph graph, PortIndex from,
    NodeIndex to)`  **Description**: Removes an execution edge between two nodes
    in the graph.  **Example**:  ```csharp RealityFlowAPI.Instance.RemoveExecEdgeFromGraph(graph,
    fromPortIndex, toNodeIndex); ```  ### 11. `SetNodePosition(Graph graph, NodeIndex
    node, Vector2 position)`  **Description**: Sets the position of a node in the
    graph.  **Example**:  ```csharp RealityFlowAPI.Instance.SetNodePosition(graph,
    nodeIndex, newPosition); ```  ### 12. `SetNodeFieldValue(Graph graph, NodeIndex
    node, int field, NodeValue value)`  **Description**: Sets the value of a node
    field in the graph.  **Example**:  ```csharp RealityFlowAPI.Instance.SetNodeFieldValue(graph,
    nodeIndex, fieldIndex, newValue); ```  ### 13. `SetNodeInputConstantValue(Graph
    graph, NodeIndex node, int port, NodeValue value)`  **Description**: Sets a constant
    value for a node input port in the graph.  **Example**:  ```csharp RealityFlowAPI.Instance.SetNodeInputConstantValue(graph,
    nodeIndex, portIndex, newValue); ```  ### 14. `AddVariableToGraph(Graph graph,
    string name, NodeValueType type)`  **Description**: Adds a variable to the graph. 
    **Example**:  ```csharp RealityFlowAPI.Instance.AddVariableToGraph(graph, variableName,
    variableType); ```  ### 15. `RemoveVariableFromGraph(Graph graph, string name)` 
    **Description**: Removes a variable from the graph.  **Example**:  ```csharp
    RealityFlowAPI.Instance.RemoveVariableFromGraph(graph, variableName); ```  ###
    16. `SpawnObject(string prefabName, Vector3 spawnPosition, Vector3 scale = default,
    Quaternion spawnRotation = default, SpawnScope scope = SpawnScope.Room)`  **Description**:
    Spawns an object from the specified prefab at the given position, scale, and
    rotation.  **Example**:  ```csharp RealityFlowAPI.Instance.SpawnObject(objectPrefab.name,
    Vector3.zero, objectPrefab.transform.localScale, Quaternion.identity, RealityFlowAPI.SpawnScope.Room);
    GameObject spawnedObject = RealityFlowAPI.Instance.SpawnObject("PrefabName",
    spawnPosition, spawnScale, spawnRotation); ```  ### 17. `DespawnObject(GameObject
    objectToDespawn)`  **Description**: Despawns the specified object.  **Example**: 
    ```csharp RealityFlowAPI.Instance.DespawnObject(objectToDespawn); ```  ### 18.
    `FindSpawnedObject(string id)`  **Description**: Finds a spawned object by its
    ID.  **Example**:  ```csharp GameObject foundObject = RealityFlowAPI.Instance.FindSpawnedObject("objectId");
    ```  ### 19. `SelectAndOutlineObject(string id)`  **Description**: Selects and
    applies an outline effect to the object with the specified ID.  **Example**: 
    ```csharp RealityFlowAPI.Instance.SelectAndOutlineObject("objectId"); ```  ###
    20. `UpdateObjectTransform(string objectName, Vector3 position, Quaternion rotation,
    Vector3 scale)`  **Description**: Updates the transform of the specified object. 
    **Example**:  ```csharp RealityFlowAPI.Instance.UpdateObjectTransform("objectName",
    newPosition, newRotation, newScale); ```  ### 21. `UndoLastAction()`  **Description**:
    Undoes the last logged action.  **Example**:  ```csharp RealityFlowAPI.Instance.UndoLastAction();
    ```  ### 22. `StartCompoundAction()`  **Description**: Starts a compound action
    for batching multiple actions together.  **Example**:  ```csharp RealityFlowAPI.Instance.StartCompoundAction();
    ```  ### 23. `EndCompoundAction()`  **Description**: Ends a compound action. 
    **Example**:  ```csharp RealityFlowAPI.Instance.EndCompoundAction(); ```  ##
    Support Functions  ### `ExportSpawnedObjectsData()`  **Description**: Exports
    data for all spawned objects in the room.  **Example**:  ```csharp string data
    = RealityFlowAPI.Instance.ExportSpawnedObjectsData(); Debug.Log(data); ```  ###
    `GetPrefabByName(string name)`  **Description**: Retrieves a prefab by its name
    from the catalogue.  **Example**:  ```csharp GameObject prefab = RealityFlowAPI.Instance.GetPrefabByName("PrefabName");
    ```  ### `FetchAndPopulateObjects()`  **Description**: Fetches objects from the
    database and populates the room with them.  **Example**:  ```csharp RealityFlowAPI.Instance.FetchAndPopulateObjects();
    ```  ### `FindSpawnedObjectByName(string objectName)`  **Description**: Finds
    a spawned object by its name.  **Example**:  ```csharp GameObject foundObject
    = RealityFlowAPI.Instance.FindSpawnedObjectByName("ObjectName"); ```  ### `UpdatePeerObjectTransform(GameObject
    obj, Vector3 position, Quaternion rotation, Vector3 scale)`  **Description**:
    Updates the transform of a peer object and sends the update to the network. 
    **Example**:  ```csharp RealityFlowAPI.Instance.UpdatePeerObjectTransform(peerObject,
    newPosition, newRotation, newScale); ```  ### `ProcessPeerTransformUpdate(string
    propertyKey, string jsonMessage)`  **Description**: Processes a transform update
    received from a peer.  **Example**:  ```csharp RealityFlowAPI.Instance.ProcessPeerTransformUpdate("propertyKey",
    jsonMessage); ``` '
  - do not include any explanations
  - aways include code with markdown
  - do not require any prefabs
  - do not require any references
  - all references should not be null
  - 'Use the namespaces using UnityEngine; using System.Collections; using Graph
    = RealityFlow.NodeGraph.Graph;  using RealityFlow.NodeGraph; '
  - ONLY GENERATE CODE THAT MATCHES WHAT THE USER IS REQUESTING NOTHING ELSE
  - DO NOT USE COROUTINES
  - All code should be in a static Execute method
  - Do not use any methods that you yourseld do not create or know you have specific
    access to such as Invoke()
  - 'Remember that the Execute method is static and instance methods of MonoBehaviour
    cannot be called from a static method. If you want to use one do it like this
    example: using UnityEngine; using System.Collections; using StarterAssets;  public
    class SpawnRectangle : MonoBehaviour {     public static void Execute()     {        
    string message = "This is what we heard you say, is this correct: \"Spawn a Rectangle\"?";        
    Debug.Log(message);          // Create a new GameObject and add this script to
    it         GameObject go = new GameObject("SpawnRectangleObject");         SpawnRectangle
    script = go.AddComponent<SpawnRectangle>();          // Start the coroutine to
    delay sending the confirmation message         script.StartCoroutine(script.DelayedMessage(1.0f));    
    }      private IEnumerator DelayedMessage(float delay)     {         yield return
    new WaitForSeconds(delay);          Debug.Log("Message will be sent in 1 seconds
    unless canceled or re-recorded.");          // Spawn a Rectangle object after
    the delay         RealityFlowAPI.Instance.SpawnObject("Rectangle (Horizontal)",
    new Vector3(0, 0, 0), Vector3.one, Quaternion.identity, RealityFlowAPI.SpawnScope.Peer);         
    // Optionally, destroy the GameObject after spawning to clean up         Destroy(gameObject);    
    } } '
  - DO NOT USE MONOBEHAVIOURS
  - If you spawn an object make it have the tag 'Spawned' and let it keep its natural
    scale which you can get with .transform.localScale
  - 'If you make a node graph or visual script you must do it in a way that is similar
    to this using the functions you see here DO NOT DO IT ANY OTHER WAY:  private
    void CreateAndLinkLoopingProcedure(string objId)     {         // Find the object        
    GameObject obj = GameObject.Find(objId);          if (obj == null)         {            
    Debug.LogError($"Object with ID {objId} not found.");             return;        
    }          // Ensure the object has a VisualScript component         var visualScript
    = obj.GetComponent<VisualScript>();         if (visualScript == null)        
    {             Debug.LogError("VisualScript component not found on the object.");            
    return;         }          // Get the current graph         Graph graph = visualScript.graph;        
    if (graph == null)         {             Debug.LogError("Graph not found on the
    VisualScript component.");             return;         }          // Create new
    node definitions         NodeDefinition intAddDef = RealityFlowAPI.Instance.NodeDefinitionDict["IntAdd"];        
    NodeDefinition thisObjectDef = RealityFlowAPI.Instance.NodeDefinitionDict["ThisObject"];        
    NodeDefinition setPositionDef = RealityFlowAPI.Instance.NodeDefinitionDict["SetPosition"];        
    NodeDefinition vector3Def = RealityFlowAPI.Instance.NodeDefinitionDict["Vector3
    Right"];          // Add new nodes to the graph         NodeIndex intAddNode
    = RealityFlowAPI.Instance.AddNodeToGraph(graph, intAddDef);         NodeIndex
    thisObjectNode = RealityFlowAPI.Instance.AddNodeToGraph(graph, thisObjectDef);        
    NodeIndex setPositionNode = RealityFlowAPI.Instance.AddNodeToGraph(graph, setPositionDef);        
    NodeIndex vector3Node = RealityFlowAPI.Instance.AddNodeToGraph(graph, vector3Def);         
    // Set the field values for the new nodes         //RealityFlowAPI.Instance.SetNodeFieldValue(graph,
    intAddNode, 0, new IntValue(0));         //RealityFlowAPI.Instance.SetNodeFieldValue(graph,
    intAddNode, 1, new IntValue(1));          // Create connections (edges) between
    the nodes         PortIndex thisObjectOutput = new PortIndex(thisObjectNode,
    0);         PortIndex vector3Output = new PortIndex(vector3Node, 0);        
    PortIndex intAddOutput = new PortIndex(intAddNode, 0);          PortIndex setPositionTarget
    = new PortIndex(setPositionNode, 0);         PortIndex setPositionValue = new
    PortIndex(setPositionNode, 1);          RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    thisObjectOutput, setPositionTarget);         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    vector3Output, setPositionValue);         RealityFlowAPI.Instance.AddDataEdgeToGraph(graph,
    intAddOutput, setPositionValue);          Debug.Log($"Added and linked nodes
    for looping procedure in the graph.");     }'
  - 'Do not try to set input values for the nodes. Also you should really only use
    the create and linkage features.

    -------------------------------------------------------------------------



    Very
    important!! Use the object 668f02eea81147bb77ec5b83 to do anything that the user
    requests if no other object name is given. If requests have no object name use
    the object 668f02eea81147bb77ec5b83. The current graph for this object is: {"id":"668f02f5a81147bb77ec5b87","name":"New
    Graph","nodes":{"list":{"listDict":[{"Item1":{"value":0},"Item2":{"DefinitionName":"OnActivate","fieldValues":[],"inputs":[],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":1},"Item2":{"DefinitionName":"Despawn","fieldValues":[],"inputs":[{"ConstantValue":{"rid":-2}}],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":2},"Item2":{"DefinitionName":"Vector3
    Forward","fieldValues":[],"inputs":[],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":3},"Item2":{"DefinitionName":"Vector3
    Forward","fieldValues":[],"inputs":[],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":4},"Item2":{"DefinitionName":"OnStart","fieldValues":[],"inputs":[],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":5},"Item2":{"DefinitionName":"ThisObject","fieldValues":[],"inputs":[],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":6},"Item2":{"DefinitionName":"Vector3
    Up","fieldValues":[],"inputs":[],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":7},"Item2":{"DefinitionName":"IntAdd","fieldValues":[],"inputs":[{"ConstantValue":{"rid":1000}},{"ConstantValue":{"rid":1001}}],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":8},"Item2":{"DefinitionName":"If","fieldValues":[],"inputs":[{"ConstantValue":{"rid":1002}}],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":9},"Item2":{"DefinitionName":"SetPosition","fieldValues":[],"inputs":[{"ConstantValue":{"rid":-2}},{"ConstantValue":{"rid":1003}}],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":10},"Item2":{"DefinitionName":"OnActivate","fieldValues":[],"inputs":[],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":11},"Item2":{"DefinitionName":"OnActivate","fieldValues":[],"inputs":[],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":12},"Item2":{"DefinitionName":"FloatDivide","fieldValues":[],"inputs":[{"ConstantValue":{"rid":1004}},{"ConstantValue":{"rid":1005}}],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":13},"Item2":{"DefinitionName":"FloatDivide","fieldValues":[],"inputs":[{"ConstantValue":{"rid":1006}},{"ConstantValue":{"rid":1007}}],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":14},"Item2":{"DefinitionName":"FloatMultiply","fieldValues":[],"inputs":[{"ConstantValue":{"rid":1008}},{"ConstantValue":{"rid":1009}}],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":15},"Item2":{"DefinitionName":"IntMultiply","fieldValues":[],"inputs":[{"ConstantValue":{"rid":1010}},{"ConstantValue":{"rid":1011}}],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":16},"Item2":{"DefinitionName":"Vector3Add","fieldValues":[{"value":{"rid":1012}},{"value":{"rid":1013}}],"inputs":[],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":17},"Item2":{"DefinitionName":"PlaySound","fieldValues":[],"inputs":[{"ConstantValue":{"rid":-2}}],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":18},"Item2":{"DefinitionName":"IntSubtract","fieldValues":[],"inputs":[{"ConstantValue":{"rid":1014}},{"ConstantValue":{"rid":1015}}],"outputs":[{}],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}},{"Item1":{"value":19},"Item2":{"DefinitionName":"Impulse","fieldValues":[],"inputs":[{"ConstantValue":{"rid":-2}},{"ConstantValue":{"rid":1016}},{"ConstantValue":{"rid":1017}}],"outputs":[],"variadicInputs":0,"Position":{"x":0.0,"y":0.0}}}]},"nextIndex":20},"reverseEdges":{"listDict":[]},"executionEdges":{"forward":{"dict":{"listDict":[]}}},"inputPorts":[],"outputPorts":[],"reverseInputPortEdges":{"listDict":[]},"reverseOutputPortEdges":{"listDict":[]},"executionInputs":0,"inputExecutionEdges":{"dict":{"listDict":[]}},"variadicPassthrough":false,"variadicOutput":false,"variables":{"listDict":[]},"references":{"version":2,"RefIds":[{"rid":-2,"type":{"class":"","ns":"","asm":""},"data":{}},{"rid":1000,"type":{"class":"IntValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0}},{"rid":1001,"type":{"class":"IntValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0}},{"rid":1002,"type":{"class":"BoolValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":false}},{"rid":1003,"type":{"class":"Vector3Value","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":{"x":0.0,"y":0.0,"z":0.0}}},{"rid":1004,"type":{"class":"FloatValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0.0}},{"rid":1005,"type":{"class":"FloatValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0.0}},{"rid":1006,"type":{"class":"FloatValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0.0}},{"rid":1007,"type":{"class":"FloatValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0.0}},{"rid":1008,"type":{"class":"FloatValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0.0}},{"rid":1009,"type":{"class":"FloatValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0.0}},{"rid":1010,"type":{"class":"IntValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0}},{"rid":1011,"type":{"class":"IntValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0}},{"rid":1012,"type":{"class":"Vector3Value","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":{"x":0.0,"y":0.0,"z":0.0}}},{"rid":1013,"type":{"class":"Vector3Value","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":{"x":0.0,"y":0.0,"z":0.0}}},{"rid":1014,"type":{"class":"IntValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0}},{"rid":1015,"type":{"class":"IntValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0}},{"rid":1016,"type":{"class":"Vector3Value","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":{"x":0.0,"y":0.0,"z":0.0}}},{"rid":1017,"type":{"class":"FloatValue","ns":"RealityFlow.NodeGraph","asm":"Assembly-CSharp"},"data":{"value":0.0}}]}}'
  - Use the provided object id which is the Object's name and the graph information
    to do graph manipulations
  - Do not send the updated graph to the database
  - "ONLY DEFINE NODE DEFINITIONS IN THIS WAY: NodeDefinition intAddDef = RealityFlowAPI.Instance.NodeDefinitionDict[\"IntAdd\"];        
    NodeDefinition thisObjectDef = RealityFlowAPI.Instance.NodeDefinitionDict[\"ThisObject\"];        
    NodeDefinition setPositionDef = RealityFlowAPI.Instance.NodeDefinitionDict[\"SetPosition\"];        
    NodeDefinition vector3Def = RealityFlowAPI.Instance.NodeDefinitionDict[\"Vector3
    Right\"]; \n-------------------------------------------------------------------------\n\n\nOnly
    use the following prefabs when spawning: Reality Palette, FireworkNew, UIText,
    Cube, Capsule, Cylinder, Rectangle (Horizontal), Rectangle (Vertical), Sphere,
    Reality Palette, TestCube, PrimitiveBase, DuplicateProxy, PlayModeManager, Reality
    Palette UPDATED, Reality Palette PlayMode UPDATED, Beagle, Bear, Bird, Bird Small,
    Bizon, Cat, Chick, Chicken, Chicken Smooth, Corgi, Cow, Deer, Deer Gray, Deer
    Smooth, Dog, Duck, Elk, Fox, Frog, German Shepard, Giraffe, Horse, lion, Lizzard,
    Penguin, Rabbit, Seal, Shark, Sheep, Building (Cafe), Building (Long), Building
    (Modern), Building (Plant), Building (Red), Building (Simple), Farm House, fences,
    Gazebo, haybale, Home (Beige), Home (Brown), Home (Simple), Hospital, Police
    Station, Scarecrow, stable, tractor, Windmill, Wood_Fence, Bush, Calla Lily,
    Cherry Blossom, Chinese Rose, Coconut Tree, corn, Flower (Calendula), Flowerpot,
    Flowers (Low-Poly), lily, Lotus, Margarita Flower, Margarita Flower (Bush), mushrooms,
    Rose, Rosebush, Strawberries, sunflower, Tomato Plant, Tree, Tree (Birch), Trees
    (Many), Vervain, Vervain (Sparse), Watering Can, basketball, Basketball Hoop,
    Bat, Golf Ball, Golf Club, Tennis Ball, Tennis Racket, Baseball, Battery, Bubble
    Gun, Drill, pedestal, screw, Soap Dispenser, Targets, Wooden Plank, Shiba, rocks,
    lavender, PrimitiveProxy\n-------------------------------------------------------------------------\n\n\nUse
    the location (-0.59, -0.05, 2.61) as the position data when you spawn any and
    all objects. Also unless specified otherwise use this location as the updateobjecttransform
    position"
  - '

    -------------------------------------------------------------------------



    Very
    important!! Use the object 668f739da81147bb77ec5cea to do anything that the user
    requests if no other object name is given. If requests have no object name use
    the object 668f739da81147bb77ec5cea. The current graph for this object is: {"id":"668f739fa81147bb77ec5cee","name":"New
    Graph","nodes":{"list":{"listDict":[]},"nextIndex":0},"reverseEdges":{"listDict":[]},"executionEdges":{"forward":{"dict":{"listDict":[]}}},"inputPorts":[],"outputPorts":[],"reverseInputPortEdges":{"listDict":[]},"reverseOutputPortEdges":{"listDict":[]},"executionInputs":0,"inputExecutionEdges":{"dict":{"listDict":[]}},"variadicPassthrough":false,"variadicOutput":false,"variables":{"listDict":[]},"references":{"version":2,"RefIds":[]}}'
